Dataset: 
customer_id: Unique identifier for each customer
customer_age: Age of the customer
customer_income: Annual income of the customer
home_ownership: Home ownership status (e.g., RENT, OWN, MORTGAGE)
employment_duration: Duration of employment in months
loan_intent: Purpose of the loan (e.g., PERSONAL, EDUCATION, MEDICAL, VENTURE)
loan_grade: Grade assigned to the loan
loan_amnt: Loan amount requested
loan_int_rate: Interest rate of the loan
term_years: Loan term in years
historical_default: Indicates if the customer has a history of default (Y/N)
cred_hist_length: Length of the customer's credit history in years
Current_loan_status: Current status of the loan (DEFAULT, NO DEFAULT)


# I asked vscode to "Without using outside libraries create a range for the age of people seeking loans."

#This is the Range for people seeking loans. 
def is_eligible_for_loan(age, min_age=18, max_age=65):
    """
    Check if the age is within the eligible range for a loan.
    
    Parameters:
    age (int): The age of the person.
    min_age (int): The minimum eligible age for a loan. Default is 18.
    max_age (int): The maximum eligible age for a loan. Default is 65.
    #The minimum age for a loan is 18 and the maximum age would be 65.
#Below the bool are the conidions that tell whether is true or false given the formula.
    Returns:
    bool: True if the age is within the range, False otherwise.
    """
    if min_age <= age <= max_age:
        return True
    return False

# Example usage:
age = 30
if is_eligible_for_loan(age):
    print("Eligible for loan")
else:
    print("Not eligible for loan")
#In this example it should print "Eligible for a loan." Because the age is above 18 but below 65.


#I asked vscode to "Without using outside libraries or sources. What is the median for the age of people seeking loans." 
#This is the median for the age of people who are seeking loans.
    def calculate_median_age(ages):
        """
        Calculate the median age from a list of ages.
        # Calculating the middle number the list of ages of people getting loans. 
        Parameters:
        ages (list): A list of ages.
        #The parameters is just a long list of people getting loans and their ages.

        Returns:
        float: The median age.
        """
        sorted_ages = sorted(ages)
        n = len(sorted_ages)
        mid = n // 2

        if n % 2 == 0:
            median = (sorted_ages[mid - 1] + sorted_ages[mid]) / 2
        else:
            median = sorted_ages[mid]

        return median

    # Example usage:
    ages = [25, 30, 35, 40, 45, 50, 55, 60, 65]
    median_age = calculate_median_age(ages)
    print(f"The median age of people seeking loans is {median_age}")
#The outcome is printed out below of the median ages of people seeking loans. 

"C:\Users\thoma\Downloads\Assignment2.0.py"


